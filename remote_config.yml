from __future__ import annotations
import time
import requests
import yaml

class RemoteConfig:
    def __init__(self, url: str, timeout: int = 5):
        self.url = url
        self.timeout = timeout
        self._etag = None
        self._last_modified = None
        self._cache = None
        self._last_fetch_ts = 0.0

    def fetch(self, force: bool = False) -> dict | None:
        headers = {}
        if not force:
            if self._etag:
                headers["If-None-Match"] = self._etag
            if self._last_modified:
                headers["If-Modified-Since"] = self._last_modified
        try:
            r = requests.get(self.url, headers=headers, timeout=self.timeout)
        except requests.RequestException:
            return None

        if r.status_code == 304:
            self._last_fetch_ts = time.time()
            return self._cache
        if r.status_code != 200:
            return None

        try:
            data = yaml.safe_load(r.text) or {}
        except Exception:
            return None

        self._etag = r.headers.get("ETag") or self._etag
        self._last_modified = r.headers.get("Last-Modified") or self._last_modified
        self._cache = data
        self._last_fetch_ts = time.time()
        return data

    def cached(self) -> dict | None:
        return self._cache